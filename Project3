{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import nltk\n",
    "from nltk import word_tokenize,bigrams,trigrams\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "finalWords = []\n",
    "tokenizer = RegexpTokenizer(r'\\w+')             # removing punctuations\n",
    "for root,dirs, files in os.walk('single-docs'):\n",
    "        for file in files[:3000]:\n",
    "            f = open(os.path.join(root,file), 'r')\n",
    "            words = tokenizer.tokenize(f.read())   # removing punctuations\n",
    "            for word in words:\n",
    "                 if word not in stopwords.words('english'):  # removing stopwords\n",
    "                    finalWords.append(word)\n",
    "print(finalWords)\n",
    "print(len(finalWords)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "allWords = []\n",
    "tokenizer = RegexpTokenizer(r'\\w+')\n",
    "for root,dirs, files in os.walk('single-docs'):\n",
    "        for file in files[:1000]:\n",
    "            f = open(os.path.join(root,file), 'r')\n",
    "            words = tokenizer.tokenize(f.read())\n",
    "            for word in words:\n",
    "                allWords.append(word)\n",
    "            \n",
    "print(len(allWords)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "bigram = []\n",
    "trigram = []\n",
    "tokenizer = RegexpTokenizer(r'\\w+')   # removing punctuations\n",
    "def countBigram(n):\n",
    "    i=0\n",
    "    count = {}\n",
    "    for root,dirs, files in os.walk('single-docs'):\n",
    "        for file in files[:n]:\n",
    "            \n",
    "            f = open(os.path.join(root,file), 'r')\n",
    "            words = tokenizer.tokenize(f.read())  # removing punctuations\n",
    "            for word in bigrams(words): \n",
    "                bigram.append(word)\n",
    "                if word not in count: # Check whether this word is in the bigrams of words\n",
    "                    count[word] = i\n",
    "                if word in count:\n",
    "                    x = count[word]\n",
    "                    x = x + 1\n",
    "                    count[word] = x            \n",
    "                \n",
    "            f.close()\n",
    "    return count              "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(countBigram(1000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "bigram = []\n",
    "trigram = []\n",
    "tokenizer = RegexpTokenizer(r'\\w+')\n",
    "def countTrigram(n):\n",
    "    i=0\n",
    "    count = {}\n",
    "    for root,dirs, files in os.walk('single-docs'):\n",
    "        for file in files[:n]:\n",
    "            \n",
    "            f = open(os.path.join(root,file), 'r')\n",
    "            words = tokenizer.tokenize(f.read())\n",
    "            for word in trigrams(words): \n",
    "                \n",
    "                if word not in count: # Check whether this word is in the bigrams of words\n",
    "                    count[word] = 0\n",
    "                if word in count:\n",
    "                    x = count[word]\n",
    "                    x = x + 1\n",
    "                    count[word] = x\n",
    "                \n",
    "            f.close()\n",
    "    return count  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tokenizer = RegexpTokenizer(r'\\w+')\n",
    "def countWord(n):\n",
    "    i=0\n",
    "    count = {}\n",
    "    for root,dirs, files in os.walk('single-docs'):\n",
    "        for file in files[:n]:\n",
    "            \n",
    "            f = open(os.path.join(root,file), 'r')\n",
    "            words = tokenizer.tokenize(f.read())\n",
    "            for word in words: \n",
    "                \n",
    "                if word not in count: # Check whether this word is in the bigrams of words\n",
    "                    count[word] = 0\n",
    "                if word in count:\n",
    "                    x = count[word]\n",
    "                    x = x + 1\n",
    "                    count[word] = x\n",
    "                \n",
    "            f.close()\n",
    "    return count "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(countTrigram(500))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(countWord(1000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(allWords.count('statistics'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "probBigram =[]\n",
    "for key,value in countBigram(100).items():\n",
    "        probBigram.append(value/allWords.count(key[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "probTrigram =[]\n",
    "for key,value in countTrigram(10).items():\n",
    "    for key1,value1 in countBigram(10).items():\n",
    "        if (key[0],key[1]) == key1:\n",
    "            probTrigram.append(value/value1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(probBigram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print(probTrigram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def countAB(b,bigram):\n",
    "    countAB = 0\n",
    "    for word in bigram:\n",
    "        if b == word:\n",
    "            countAB = countAB + 1\n",
    "    return countAB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def countA(a,L):\n",
    "    countA = 0\n",
    "    for word in L:\n",
    "        if a == word:\n",
    "            countA = countA + 1\n",
    "    return countA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = 0.05\n",
    "probSoFar = 0.0\n",
    "bestWord = \"\"\n",
    "s =\"he used to \"\n",
    "for key,value in countTrigram(1000).items():\n",
    "    if (s.split()[len(s.split())-2],s.split()[len(s.split())-1]) == (key[0],key[1]):\n",
    "        for key1,value1 in countBigram(1000).items():\n",
    "            if(value/value1) > p and key1 == (key[0],key[1]):\n",
    "                bestWord = key[2]\n",
    "                print(\"Sentence : \",s,\"   has probability \", value/value1 ,\"with the word  \" ,key[2])\n",
    "                s = s + \" \" + key[2]\n",
    "                print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = 0.1\n",
    "probSoFar = 0.0\n",
    "bestWord = \"\"\n",
    "s =\"America is country in\"\n",
    "for key,value in countTrigram(1000).items():\n",
    "    if (s.split()[len(s.split())-2],s.split()[len(s.split())-1]) == (key[0],key[1]):\n",
    "        for key1,value1 in countBigram(1000).items():\n",
    "            if(value/value1) > p and key1 == (key[0],key[1]):\n",
    "                bestWord = key[2]\n",
    "                print(\"Sentence : \",s,\"   has probability \", value/value1 ,\"with the word  \" ,key[2])\n",
    "                s = s + \" \" + key[2]\n",
    "                print(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
